@inherits RazorFunction

@functions {
    override public string FunctionDescription
    {
        get { return "A function that displays a main menu"; }
    }

    private IEnumerable<PageNode> OpenPages(PageNode selectedPageNode)
    {
        var openPages = new List<PageNode>();
        var openPage = selectedPageNode;

        while (openPage != null)
        {
            openPages.Add(openPage);
            openPage = openPage.ParentPage; // crawl up
        }

        return openPages;
    }
}

@{
    var pagenodes = Sitemap.CurrentHomePageNode.GetPageNodes(SitemapScope.Level2AndSiblings).ToList();
    if (!pagenodes.Any()) { return; }
}

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
</head>
<body>
    <ul>
        @foreach (var page in pagenodes)
        {
            if (!string.IsNullOrEmpty(page.MenuTitle))
            {
                var isDropDown = page.ChildPages.Any(cp => !string.IsNullOrEmpty(cp.MenuTitle));
                var isActive = page.Id == CurrentPageNode.Id;
                var isOpen = OpenPages(CurrentPageNode).Any(op => op.Id == page.Id);

                <li class="@(isActive ? "active" : string.Empty)">
                    <a href="@page.Url" class="@(isActive ? "active" : string.Empty) @(isDropDown ? " dropdown-toggle" : string.Empty)" data-toggle="@(isDropDown ? "dropdown" : null)">
                        @page.MenuTitle
                        @if (isDropDown)
                        {
                            <b class="caret"></b>
                        }
                    </a>
                    @if (isDropDown)
                    {

                        <div class="dropdown-menu">
                            <a href="@page.Url" title="@page.Title" class="dropdown-menu-rootpage">
                                @page.Title
                            </a>
                            @NavigationTree(page, 3)

                        </div>
                    }
                </li>
            }
        }
    </ul>
</body>
</html>

@helper NavigationTree(PageNode parentPage, int maxLevel)
{
    var pages = parentPage.ChildPages;
    var isOpen = OpenPages(@CurrentPageNode).Any(op => op.Id == parentPage.Id);
    var isSelected = @CurrentPageNode.Id == parentPage.Id;
    var pageLevel = parentPage.Level;

    <ul class="nav level-@(pageLevel)">
        @if (pages.Any())
        {
            foreach (var subPage in pages)
            {
                if (!String.IsNullOrWhiteSpace(subPage.MenuTitle))
                {
                    isOpen = OpenPages(@CurrentPageNode).Any(op => op.Id == subPage.Id);
                    isSelected = @CurrentPageNode.Id == subPage.Id;
                    var isHasChilds = subPage.ChildPages.Any(p => !string.IsNullOrEmpty(p.MenuTitle));

                    <li class="@(isOpen ? "open" : string.Empty)@(isSelected ? " active" : string.Empty)@(isHasChilds ? " has-childs" : string.Empty)">
                        <a href="@(subPage.Url)">@subPage.MenuTitle</a>
                        @if (pageLevel < maxLevel)
                        {
                            @NavigationTree(subPage, maxLevel);
                        }
                    </li>
                }
            }
        }
    </ul>
}