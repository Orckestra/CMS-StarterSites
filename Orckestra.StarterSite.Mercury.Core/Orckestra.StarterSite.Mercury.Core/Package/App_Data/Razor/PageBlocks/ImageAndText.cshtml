@using Composite.Core
@inherits RazorFunction

@functions {
    public override string FunctionDescription
    {
        get { return "A page block which shows an image and text"; }
    }

    [FunctionParameter(Label = "Image", Help = "The major image component for this block.")]
    public DataReference<IImageFile> Image { get; set; }

    [FunctionParameter(Label = "Text", Help = "The text for this block.")]
    public XhtmlDocument Text { get; set; }

    [FunctionParameter(Label = "Image position", Help = "Where the image should be shown", DefaultValue = "Left", WidgetFactoryMethod = "GetImagePositionWidget")]
    public string ImagePosition { get; set; }

    [FunctionParameter(Label = "Text Background Style", DefaultValue = "bg-none", WidgetFactoryMethod = "GetStyleWidget")]
    public string Style { get; set; }

    public static WidgetFunctionProvider GetImagePositionWidget()
    {
        Expression<Func<object>> expression = () => GetImagePositionWidgetOptions();
        var method = (expression.Body as MethodCallExpression).Method;

        return StandardWidgetFunctions.DropDownList(method.DeclaringType, method.Name, false, false);
    }

    public static string[] GetImagePositionWidgetOptions()
    {
        return new[] { "Left", "Right" };
    }
}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0">
<head>
</head>
<body>
    <div class="image-and-text c1-fullwidth  @Style">
        @if (ImagePosition != "Left")
        {
            <div class="text-container left">
                @Markup(Text)
            </div>
        }
        <div class="image-container">
            <img class="center-block" alt="@Image.Data.Title" src="@Html.C1().MediaUrl(Image.Data)?mw=920" />
        </div>

        @if (ImagePosition == "Left")
        {
            <div class="text-container">
                @Markup(Text)
            </div>
        }
    </div>
</body>
</html>
@functions {
    public static WidgetFunctionProvider GetStyleWidget()
    {
        Expression<Func<object>> expression = () => GetBackgroundOptions();
        var method = (expression.Body as MethodCallExpression).Method;

        return StandardWidgetFunctions.DropDownList(method.DeclaringType, method.Name, "Key", "Value", false);
    }

    public static Dictionary<string, string> GetBackgroundOptions()
    {
        var options = new Dictionary<string, string>();
        try
        {
            var optionsFile = XDocument.Load(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"App_Data/Razor/PageBlocks/BackgroundStyleOptions.xml"));
            options = optionsFile.Root.Elements("Option").ToDictionary(el => el.Attribute("CssClassKey").Value, el => el.Attribute("Label").Value);
        }
        catch (Exception ex)
        {
            Log.LogError("PageBlocks - Error while loading options for the Background parameter", ex);
        }
        return options;
    }

}